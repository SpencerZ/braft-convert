{"version":3,"sources":["../src/configs.js"],"names":["namedColors","getHexColor","color","replace","test","indexOf","rgbArray","split","convertedColor","length","map","hex","parseInt","x","toString","join","blocks","convertAtomicBlock","block","contentState","contentBlock","getBlockForKey","key","entityKey","getEntityAt","entity","getEntity","mediaType","getType","toLowerCase","data","float","alignment","getData","url","link","link_target","width","height","imageWrapStyle","textAlign","display","styleToHTML","props","style","textDecoration","backgroundColor","fontSize","fontFamily","fontFamilies","find","item","name","family","blockToHTML","result","blockStyle","blockType","type","previousBlock","getBlockBefore","nextBlock","getBlockAfter","previousBlockType","nextBlockType","codeBreakLine","text","start","end","nestStart","nestEnd","entityToHTML","originalText","entityType","href","target","getToHTMLConfig","htmlToStyle","nodeName","node","currentStyle","add","toUpperCase","htmlToEntity","createEntity","querySelectorAll","src","parentNode","entityData","htmlToBlock","nodeStyle","classList","contains","getFromHTMLConfig"],"mappings":"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","file":"configs.js","sourcesContent":["import React from 'react'\n\nconst namedColors = {\n  \"aliceblue\": \"#f0f8ff\",\n  \"antiquewhite\": \"#faebd7\",\n  \"aqua\": \"#00ffff\",\n  \"aquamarine\": \"#7fffd4\",\n  \"azure\": \"#f0ffff\",\n  \"beige\": \"#f5f5dc\",\n  \"bisque\": \"#ffe4c4\",\n  \"black\": \"#000000\",\n  \"blanchedalmond\": \"#ffebcd\",\n  \"blue\": \"#0000ff\",\n  \"blueviolet\": \"#8a2be2\",\n  \"brown\": \"#a52a2a\",\n  \"burlywood\": \"#deb887\",\n  \"cadetblue\": \"#5f9ea0\",\n  \"chartreuse\": \"#7fff00\",\n  \"chocolate\": \"#d2691e\",\n  \"coral\": \"#ff7f50\",\n  \"cornflowerblue\": \"#6495ed\",\n  \"cornsilk\": \"#fff8dc\",\n  \"crimson\": \"#dc143c\",\n  \"cyan\": \"#00ffff\",\n  \"darkblue\": \"#00008b\",\n  \"darkcyan\": \"#008b8b\",\n  \"darkgoldenrod\": \"#b8860b\",\n  \"darkgray\": \"#a9a9a9\",\n  \"darkgreen\": \"#006400\",\n  \"darkkhaki\": \"#bdb76b\",\n  \"darkmagenta\": \"#8b008b\",\n  \"darkolivegreen\": \"#556b2f\",\n  \"darkorange\": \"#ff8c00\",\n  \"darkorchid\": \"#9932cc\",\n  \"darkred\": \"#8b0000\",\n  \"darksalmon\": \"#e9967a\",\n  \"darkseagreen\": \"#8fbc8f\",\n  \"darkslateblue\": \"#483d8b\",\n  \"darkslategray\": \"#2f4f4f\",\n  \"darkturquoise\": \"#00ced1\",\n  \"darkviolet\": \"#9400d3\",\n  \"deeppink\": \"#ff1493\",\n  \"deepskyblue\": \"#00bfff\",\n  \"dimgray\": \"#696969\",\n  \"dodgerblue\": \"#1e90ff\",\n  \"firebrick\": \"#b22222\",\n  \"floralwhite\": \"#fffaf0\",\n  \"forestgreen\": \"#228b22\",\n  \"fuchsia\": \"#ff00ff\",\n  \"gainsboro\": \"#dcdcdc\",\n  \"ghostwhite\": \"#f8f8ff\",\n  \"gold\": \"#ffd700\",\n  \"goldenrod\": \"#daa520\",\n  \"gray\": \"#808080\",\n  \"green\": \"#008000\",\n  \"greenyellow\": \"#adff2f\",\n  \"honeydew\": \"#f0fff0\",\n  \"hotpink\": \"#ff69b4\",\n  \"indianred \": \"#cd5c5c\",\n  \"indigo\": \"#4b0082\",\n  \"ivory\": \"#fffff0\",\n  \"khaki\": \"#f0e68c\",\n  \"lavender\": \"#e6e6fa\",\n  \"lavenderblush\": \"#fff0f5\",\n  \"lawngreen\": \"#7cfc00\",\n  \"lemonchiffon\": \"#fffacd\",\n  \"lightblue\": \"#add8e6\",\n  \"lightcoral\": \"#f08080\",\n  \"lightcyan\": \"#e0ffff\",\n  \"lightgoldenrodyellow\": \"#fafad2\",\n  \"lightgrey\": \"#d3d3d3\",\n  \"lightgreen\": \"#90ee90\",\n  \"lightpink\": \"#ffb6c1\",\n  \"lightsalmon\": \"#ffa07a\",\n  \"lightseagreen\": \"#20b2aa\",\n  \"lightskyblue\": \"#87cefa\",\n  \"lightslategray\": \"#778899\",\n  \"lightsteelblue\": \"#b0c4de\",\n  \"lightyellow\": \"#ffffe0\",\n  \"lime\": \"#00ff00\",\n  \"limegreen\": \"#32cd32\",\n  \"linen\": \"#faf0e6\",\n  \"magenta\": \"#ff00ff\",\n  \"maroon\": \"#800000\",\n  \"mediumaquamarine\": \"#66cdaa\",\n  \"mediumblue\": \"#0000cd\",\n  \"mediumorchid\": \"#ba55d3\",\n  \"mediumpurple\": \"#9370d8\",\n  \"mediumseagreen\": \"#3cb371\",\n  \"mediumslateblue\": \"#7b68ee\",\n  \"mediumspringgreen\": \"#00fa9a\",\n  \"mediumturquoise\": \"#48d1cc\",\n  \"mediumvioletred\": \"#c71585\",\n  \"midnightblue\": \"#191970\",\n  \"mintcream\": \"#f5fffa\",\n  \"mistyrose\": \"#ffe4e1\",\n  \"moccasin\": \"#ffe4b5\",\n  \"navajowhite\": \"#ffdead\",\n  \"navy\": \"#000080\",\n  \"oldlace\": \"#fdf5e6\",\n  \"olive\": \"#808000\",\n  \"olivedrab\": \"#6b8e23\",\n  \"orange\": \"#ffa500\",\n  \"orangered\": \"#ff4500\",\n  \"orchid\": \"#da70d6\",\n  \"palegoldenrod\": \"#eee8aa\",\n  \"palegreen\": \"#98fb98\",\n  \"paleturquoise\": \"#afeeee\",\n  \"palevioletred\": \"#d87093\",\n  \"papayawhip\": \"#ffefd5\",\n  \"peachpuff\": \"#ffdab9\",\n  \"peru\": \"#cd853f\",\n  \"pink\": \"#ffc0cb\",\n  \"plum\": \"#dda0dd\",\n  \"powderblue\": \"#b0e0e6\",\n  \"purple\": \"#800080\",\n  \"rebeccapurple\": \"#663399\",\n  \"red\": \"#ff0000\",\n  \"rosybrown\": \"#bc8f8f\",\n  \"royalblue\": \"#4169e1\",\n  \"saddlebrown\": \"#8b4513\",\n  \"salmon\": \"#fa8072\",\n  \"sandybrown\": \"#f4a460\",\n  \"seagreen\": \"#2e8b57\",\n  \"seashell\": \"#fff5ee\",\n  \"sienna\": \"#a0522d\",\n  \"silver\": \"#c0c0c0\",\n  \"skyblue\": \"#87ceeb\",\n  \"slateblue\": \"#6a5acd\",\n  \"slategray\": \"#708090\",\n  \"snow\": \"#fffafa\",\n  \"springgreen\": \"#00ff7f\",\n  \"steelblue\": \"#4682b4\",\n  \"tan\": \"#d2b48c\",\n  \"teal\": \"#008080\",\n  \"thistle\": \"#d8bfd8\",\n  \"tomato\": \"#ff6347\",\n  \"turquoise\": \"#40e0d0\",\n  \"violet\": \"#ee82ee\",\n  \"wheat\": \"#f5deb3\",\n  \"white\": \"#ffffff\",\n  \"whitesmoke\": \"#f5f5f5\",\n  \"yellow\": \"#ffff00\",\n  \"yellowgreen\": \"#9acd32\"\n}\n\nexport const getHexColor = (color) => {\n\n  color = color.replace('color:', '').replace(';', '').replace(' ', '')\n\n  if (/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(color)) {\n    return color\n  } else if (namedColors[color]) {\n    return namedColors[color]\n  } else if (color.indexOf('rgb') === 0) {\n\n    let rgbArray = color.split(',')\n    let convertedColor = rgbArray.length < 3 ? null : '#' + [rgbArray[0], rgbArray[1], rgbArray[2]].map(x => {\n      const hex = parseInt(x.replace(/\\D/g, ''), 10).toString(16)\n      return hex.length === 1 ? '0' + hex : hex\n    }).join('')\n\n    return /^#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})$/.test(convertedColor) ? convertedColor : null\n\n  } else {\n    return null\n  }\n\n}\n\nexport const blocks = {\n  'header-one': 'h1',\n  'header-two': 'h2',\n  'header-three': 'h3',\n  'header-four': 'h4',\n  'header-fiv': 'h5',\n  'header-six': 'h6',\n  'unstyled': 'p',\n  'blockquote': 'blockquote'\n}\n\nconst convertAtomicBlock = (block, contentState) => {\n\n  const contentBlock = contentState.getBlockForKey(block.key)\n  const entityKey = contentBlock.getEntityAt(0)\n  const entity = contentState.getEntity(entityKey)\n  const mediaType = entity.getType().toLowerCase()\n\n  let { float, alignment } = block.data\n  let { url, link, link_target, width, height } = entity.getData()\n\n  if (mediaType === 'image') {\n\n    let imageWrapStyle = {}\n\n    if (float) {\n      imageWrapStyle.float = float\n    } else if (alignment) {\n      imageWrapStyle.textAlign = alignment\n    }\n\n    if (link) {\n      return (\n        <div className=\"media-wrap image-wrap\" style={imageWrapStyle}>\n          <a style={{display:'inline-block'}} href={link} target={link_target}>\n            <img src={url} width={width} height={height} />\n          </a>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"media-wrap image-wrap\" style={imageWrapStyle}>\n          <img src={url} width={width} height={height} />\n        </div>\n      )\n    }\n\n  } else if (mediaType === 'audio') {\n    return <div className=\"media-wrap audio-wrap\"><audio controls src={url} /></div>\n  } else if (mediaType === 'video') {\n    return <div className=\"media-wrap video-wrap\"><video controls src={url} width={width} height={height} /></div>\n  } else {\n    return <p></p>\n  }\n\n}\n\nconst styleToHTML = (props) => (style) => {\n\n  style = style.toLowerCase()\n\n  if (style === 'strikethrough') {\n    return <span style={{textDecoration: 'line-through'}}/>\n  } else if (style === 'superscript') {\n    return <sup/>\n  } else if (style === 'subscript') {\n    return <sub/>\n  } else if (style.indexOf('color-') === 0) {\n    return <span style={{color: '#' + style.split('-')[1]}}/> \n  } else if (style.indexOf('bgcolor-') === 0) {\n    return <span style={{backgroundColor: '#' + style.split('-')[1]}}/> \n  } else if (style.indexOf('fontsize-') === 0) {\n    return <span style={{fontSize: style.split('-')[1] + 'px'}}/> \n  } else if (style.indexOf('fontfamily-') === 0) {\n    let fontFamily = props.fontFamilies.find((item) => item.name.toLowerCase() === style.split('-')[1])\n    return <span style={{fontFamily: fontFamily.family}}/> \n  }\n\n}\n\nconst blockToHTML = (contentState) => (block) => {\n\n  let result = null\n  let blockStyle = \"\"\n\n  const blockType = block.type.toLowerCase()\n  const { textAlign } = block.data\n\n  if (textAlign) {\n    blockStyle = ` style=\"text-align:${textAlign};\"`\n  }\n\n  if (blockType === 'atomic') {\n    return convertAtomicBlock(block, contentState)\n  } else if (blockType === 'code-block') {\n\n    const previousBlock = contentState.getBlockBefore(block.key)\n    const nextBlock = contentState.getBlockAfter(block.key)\n    const previousBlockType = previousBlock && previousBlock.getType()\n    const nextBlockType = nextBlock && nextBlock.getType()\n    const codeBreakLine = block.text ? '' : '<br>'\n\n    if (previousBlockType === 'code-block' && nextBlockType === 'code-block') {\n      return {\n        start: `<code><div>${codeBreakLine}`,\n        end: '</div></code>'\n      }\n    } else if (previousBlockType === 'code-block') {\n      return {\n        start: `<code><div>${codeBreakLine}`,\n        end: '</div></code></pre>'\n      }\n    } else if (nextBlockType === 'code-block') {\n      return {\n        start: `<pre><code><div>${codeBreakLine}`,\n        end: '</div></code>'\n      }\n    } else {\n      return {\n        start: `<pre><code><div>${codeBreakLine}`,\n        end: '</div></code></pre>'\n      }\n    }\n\n  } else if (blocks[blockType]) {\n    return {\n      start: `<${blocks[blockType]}${blockStyle}>`,\n      end: `</${blocks[blockType]}>`\n    }\n  } else if (blockType === 'unordered-list-item') {\n    return {\n      start: `<li${blockStyle}>`,\n      end: '</li>',\n      nestStart: '<ul>',\n      nestEnd: '</ul>'\n    }\n  } else if (blockType === 'ordered-list-item') {\n    return {\n      start: `<li${blockStyle}>`,\n      end: '</li>',\n      nestStart: '<ol>',\n      nestEnd: '</ol>'\n    }\n  }\n\n}\n\nconst entityToHTML = (entity, originalText) => {\n\n  let result = originalText\n  const entityType = entity.type.toLowerCase()\n\n  if (entityType === 'link') {\n    return <a href={entity.data.href} target={entity.data.target}>{originalText}</a>\n  } else if (entityType === 'color') {\n    return <span style={{color:entity.data.color}}>{originalText}</span>\n  } else if (entityType === 'bg-color') {\n    return <span style={{backgroundColor:entity.data.color}}>{originalText}</span>\n  }\n\n}\n\nexport const getToHTMLConfig = (props) => {\n\n  return {\n    styleToHTML: styleToHTML(props),\n    entityToHTML: entityToHTML,\n    blockToHTML: blockToHTML(props.contentState)\n  }\n\n}\n\nconst htmlToStyle = (nodeName, node, currentStyle) => {\n\n  if (nodeName === 'span' && node.style.color) {\n    let color = getHexColor(node.style.color)\n    return color ? currentStyle.add('COLOR-' + color.replace('#', '').toUpperCase()) : currentStyle\n  } else if (nodeName === 'span' && node.style.backgroundColor) {\n    let color = getHexColor(node.style.backgroundColor)\n    return color ? currentStyle.add('BGCOLOR-' + color.replace('#', '').toUpperCase()) : currentStyle\n  } else if (nodeName === 'sup') {\n    return currentStyle.add('SUPERSCRIPT')\n  } else if (nodeName === 'sub') {\n    return currentStyle.add('SUBSCRIPT')\n  } else if (nodeName === 'span' && node.style.fontSize) {\n    return currentStyle.add('FONTSIZE-' + parseInt(node.style.fontSize, 10))\n  } else if (nodeName === 'span' && node.style.textDecoration === 'line-through') {\n    return currentStyle.add('STRIKETHROUGH')\n  } else {\n    return currentStyle\n  }\n\n}\n\nconst htmlToEntity = (nodeName, node, createEntity) => {\n\n  if (nodeName === 'a' && !node.querySelectorAll('img').length) {\n\n    let { href, target } = node\n    return createEntity('LINK', 'MUTABLE',{ href, target })\n\n  } else if (nodeName === 'audio') {\n    return createEntity('AUDIO', 'IMMUTABLE',{ url: node.src }) \n  } else if (nodeName === 'video') {\n    return createEntity('VIDEO', 'IMMUTABLE',{ url: node.src }) \n  } else if (nodeName === 'img') {\n\n    let parentNode = node.parentNode\n    let { src:url, width, height } = node\n    width = width || 'auto'\n    height = height || 'auto'\n    let entityData = { url, width, height }\n\n    if (parentNode.nodeName.toLowerCase() === 'a') {\n      entityData.link = parentNode.href\n      entityData.link_target = parentNode.target\n    }\n\n    return createEntity('IMAGE', 'IMMUTABLE', entityData) \n\n  }\n\n}\n\nconst htmlToBlock = (nodeName, node) => {\n\n  let nodeStyle = node.style || {}\n\n  if (node.classList && node.classList.contains('media-wrap')) {\n\n    return {\n      type: 'atomic',\n      data: {\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    }\n\n  } else if (nodeName === 'img') {\n\n    return {\n      type: 'atomic',\n      data: {\n        float: nodeStyle.float,\n        alignment: nodeStyle.textAlign\n      }\n    }\n\n  } else if (nodeName === 'p' && nodeStyle.textAlign) {\n\n    return {\n      type: 'unstyled',\n      data: {\n        textAlign: nodeStyle.textAlign\n      }\n    }\n\n  }\n\n}\n\nexport const getFromHTMLConfig = (props) => {\n  return { htmlToStyle, htmlToEntity, htmlToBlock }\n}"]}